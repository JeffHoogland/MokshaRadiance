/* * * * * * * * * * * * * *
 *  WINDOW BORDER PROGRAMS *
 * * * * * * * * * * * * * */
 
//Through Button on Border
#define THROUGH_BUTTON(POSITION, TO, OFF1, OFF2)										\
	images.image: "img/border_trough_"POSITION".png" COMP;								\
	part { name: "through_"POSITION; type: IMAGE;										\
			description { state: "default" 0.0;											\
				rel1.to: TO;															\
				rel1.relative: 1.0 0.0;													\
				rel1.offset: OFF1 0;													\
				rel2.to: TO;															\
				rel2.offset: OFF2 0;													\
				color: 255 255 255 255;													\
				color_class: "border_frame";											\
				FIXED_SIZE (19,19)														\
				image {																	\
					normal: "img/border_trough_"POSITION".png"; border: 6 6 6 6;		\
				}																		\
			}																			\
			description { state: "focused" 0.0;											\
				inherit: "default" 0.0;													\
				color: 255 255 255 100;													\
				color_class: "none";													\
			}																			\
		}

//Windows Buttons Base
#define WIN_BT_BASE(FUNCT,TO,COLOR_CLASS_FOCUSED,COLOR_CLASS_UNFOCUSED)	\
		part {  name: "button_"FUNCT"_base"; type: IMAGE;				\
			description { state: "default" 0.0;							\
				STAY_ON(TO)												\
				FIXED_SIZE(19,19)										\
				image.normal: "img/win_button_base.png";				\
				color_class: COLOR_CLASS_UNFOCUSED;						\
			}															\
			description { state: "focused" 0.0;							\
				inherit: "default" 0.0;									\
				color_class: COLOR_CLASS_FOCUSED;						\
			}															\
		}
		
//Windows Buttons Event
#define WIN_BT_EVENTS(FUNCT)						\
	part {	name: "e.event."FUNCT; type: RECT;		\
			description { state: "default" 0.0;		\
				STAY_ON("button_"FUNCT"_base")		\
				color: TRANSPARENT;					\
			}										\
		}

//Border event resize
#define EVENT_RESIZE(POS, OFF1, REL1, OFF2, REL2)	\
	part { name: "e.event.resize."POS; type: RECT;			\
		description { state: "default" 0.0;					\
			rel1 { to: "border"; relative: REL1; offset: OFF1;	\
			}												\
			rel2 { to: "border"; relative: REL2; offset: OFF2;	\
			}												\
			color: TRANSPARENT;								\
		}													\
	}

//Border Images
#define BORDER_IMAGES										\
		image: "img/border.png" COMP;						\
		image: "img/border_max.png" COMP;					\
		image: "img/borderShine.png" COMP;					\
		image: "img/borderShine2.png" COMP;					\
		image: "img/border_maxShine.png" COMP;				\
		image: "img/border_maxShine2.png" COMP;				\
		image: "img/border_trough_right.png" COMP;			\
		image: "img/win_button_base.png" COMP;

#define BT_CLOSE_IMAGES										\
		image: "img/close_focused_normal_SH.png" COMP;		\
		image: "img/close_unfocused_normal_SH.png" COMP;	\
		image: "img/close_unfocused_prelight_SH.png" COMP;	\
		image: "img/close_unfocused_pressed_SH.png" COMP;	\
		image: "img/close_focused_prelight_SH.png" COMP;	\
		image: "img/close_focused_pressed_SH.png" COMP;

#define BT_MIN_MAX_IMAGES										\
		image: "img/maximize_focused_normal_SH.png" COMP;		\
		image: "img/maximize_unfocused_normal_SH.png" COMP;		\
		image: "img/maximize_unfocused_prelight_SH.png" COMP;	\
		image: "img/maximize_unfocused_pressed_SH.png" COMP;	\
		image: "img/maximize_focused_prelight_SH.png" COMP;		\
		image: "img/maximize_focused_pressed_SH.png" COMP;		\
		image: "img/unmaximize_focused_normal_SH.png" COMP;		\
		image: "img/unmaximize_unfocused_normal_SH.png" COMP;	\
		image: "img/unmaximize_unfocused_prelight_SH.png" COMP;	\
		image: "img/unmaximize_unfocused_pressed_SH.png" COMP;	\
		image: "img/unmaximize_focused_prelight_SH.png" COMP;	\
		image: "img/unmaximize_focused_pressed_SH.png" COMP;	\
																\
		image: "img/minimize_focused_normal_SH.png" COMP;		\
		image: "img/minimize_unfocused_normal_SH.png" COMP;		\
		image: "img/minimize_unfocused_prelight_SH.png" COMP;	\
		image: "img/minimize_unfocused_pressed_SH.png" COMP;	\
		image: "img/minimize_focused_prelight_SH.png" COMP;		\
		image: "img/minimize_focused_pressed_SH.png" COMP;

//Parts used for Border
#define BORDER_PARTS														\
		part { name: "shadow_clip"; type: RECT;	mouse_events: 0;						\
         description { state: "default" 0.0;								\
            STAY_ON("shadow")												\
            color: VISIBLE;													\
         }																	\
         description { state: "hidden" 0.0;									\
            inherit: "default" 0.0;											\
            color: TRANSPARENT;												\
            visible: 0;														\
         }																	\
      }																		\
      part { name: "shadow"; mouse_events: 0;								\
         clip_to: "shadow_clip";											\
         description { state: "default" 0.0;								\
            image.normal: "win_shadow.png";									\
            image.border: 8 8 8 8;											\
            image.middle: 0;												\
            rel1.to: "border";												\
            rel1.offset: -4  -4;											\
            rel2.to: "border";												\
            rel2.offset: 3 3;												\
            fill.smooth: 1;													\
            color: 0 0 0 125;												\
         }																	\
         description { state: "maximized" 0.0;								\
			inherit: "default" 0.0;											\
			visible: 0; color: TRANSPARENT;									\
         }																	\
      }																		\
		part { name: "border"; type: IMAGE;	mouse_events: 0;				\
		  description { state: "default" 0.0;								\
			  image { normal: "img/border_max.png";								\
				  border: 10 10 27 3;	middle: 0;							\
			  }																\
			  fill.smooth: 0;												\
			  color: 255 255 255 255;										\
			  color_class: "border_frame";									\
		  }																	\
		  description { state: "maximized" 0.0;								\
			inherit: "default" 0.0;											\
			image.normal: "img/border_max.png";								\
		  }																	\
	  }																		\
		CLIP_SWITCH("border", "border", "border", "default", "maximized")	\
		part { name: "borderShine"; type: IMAGE;	mouse_events: 0;		\
			clip_to: "border_clip_default";									\
		  description { state: "default" 0.0;								\
			  STAY_ON("border")												\
			  image { normal: "img/border_maxShine.png";						\
				  border: 10 10 27 3;	middle: 0;							\
			  }																\
			  fill.smooth: 0;												\
			  color_class: "border_frame_active";			  				\
		  }																	\
		  description { state: "focused" 0.0;								\
			  inherit: "default" 0.0;										\
			  image { normal: "img/border_maxShine2.png";						\
				  border: 10 10 27 3;	middle: 0;							\
			  }																\
			  fill.smooth: 0;												\
		  }																	\
	  }																		\
	  part { name: "border_maxShine"; type: IMAGE;	mouse_events: 0;		\
			clip_to: "border_clip_maximized";								\
		  description { state: "default" 0.0;								\
			  STAY_ON("border")												\
			  image { normal: "img/border_maxShine.png";					\
				  border: 10 10 27 3;	middle: 0;							\
			  }																\
			  fill.smooth: 0;												\
			  color_class: "border_frame_active";			  				\
		  }																	\
		  description { state: "focused" 0.0;								\
			  inherit: "default" 0.0;										\
			  image { normal: "img/border_maxShine2.png";					\
				  border: 10 10 27 3;	middle: 0;							\
			  }																\
			  fill.smooth: 0;												\
		  }																	\
	  }																		\
		part { name: "client_clip"; type: RECT;								\
         description { state: "default" 0.0;								\
            rel1.to_y: "e.swallow.client";									\
            rel2.to_y: "e.swallow.client";									\
         }																	\
         description { state: "hidden" 0.0;									\
			inherit: "default" 0.0;											\
			visible: 0;														\
		}																	\
      }																		\
		part { name: "e.swallow.client"; type: SWALLOW; mouse_events: 1;	\
         clip_to: "client_clip";											\
         description { state: "default" 0.0; 								\
            rel1.relative: 0.0 0.0;											\
            rel1.to: "border";												\
            rel1.offset: 3 27;												\
            rel2.relative: 1.0 1.0;											\
            rel2.to: "border";												\
            rel2.offset: -4 -4;												\
         }																	\
         description { state: "shaded" 0.0;									\
			inherit: "default" 0.0;											\
			visible: 0;														\
		}																	\
      }

//Parts used for Icons
#define ICON_PARTS										\
		part { name: "icon"; type: SPACER;				\
         description { state: "default" 0.0;			\
            rel1.to: "e.event.icon";					\
            rel2.to: "e.event.icon";					\
         }												\
         description { state: "bounce1" 0.0;			\
            inherit: "default" 0.0;						\
            rel1.relative: 0.0 0.15;					\
            rel2.relative: 1.0 1.15;					\
         }												\
         description { state: "bounce2" 0.0;			\
            inherit: "default" 0.0;						\
            rel1.relative: 0.0 -0.15;					\
            rel2.relative: 1.0 0.85;					\
         }												\
      }													\
		part { name: "e.swallow.icon"; type: SWALLOW;	\
         description { state: "default" 0.0;			\
            rel1.to: "icon";							\
            rel1.relative: 0.15 0.15;					\
            rel2.to: "icon";							\
            rel2.relative: 0.85 0.85;					\
            rel2.offset: 0 0;							\
         }												\
      }

//Parts used for Title   
#define TITLE_PARTS(REL2_TO_X)							\
		part { name: "e.text.title"; type: TEXT;		\
         scale: 1;										\
         effect: SHADOW BOTTOM_RIGHT;					\
         description { state: "default" 0.0;			\
            color_class: "border_title";				\
            rel1.relative: 1.0 0.0;						\
            rel1.offset: 1 2;							\
            rel1.to_x: "e.event.icon";					\
            rel2.relative: 0.0 1.0;						\
            rel2.offset: -2 -1;							\
            rel2.to_y: "e.event.titlebar";				\
            rel2.to_x: REL2_TO_X;						\
            align: 0.0 0.0;								\
            color_class: "border_title";				\
            color: 255 255 255 255;						\
            color2: 255 255 255 255;					\
            color3: 255 255 255 255;					\
            text { font: "Ubuntu:style=Bold"; size: 14;	\
               text_class: "title_bar";					\
               align: 0.0 0.5;							\
               min: 0 1;								\
            }											\
            fixed: 0 1;									\
         }												\
         description { state: "focused" 0.0;			\
            inherit: "default" 0.0;						\
            color_class: "border_title_active";			\
		 }												\
      }

//Parts used for Button Shine
#define BT_SHINE(NAME, IMAGE_NAME, CLIP_TO, THROUGH_POSITION, COL_CLASS)\
part {	name: NAME; type: IMAGE;										\
				clip_to: CLIP_TO;										\
			description { state: "default" 0.0;							\
				STAY_ON("through_"THROUGH_POSITION)						\
				FIXED_SIZE(19,19)										\
				image.normal: "img/"IMAGE_NAME"_normal_SH.png";			\
				color_class: COL_CLASS;									\
			}															\
			description { state: "prelight" 0.0;						\
				inherit: "default" 0.0;									\
				image.normal: "img/"IMAGE_NAME"_prelight_SH.png";		\
			}															\
			description { state: "pressed" 0.0;							\
				inherit: "default" 0.0;									\
				image.normal: "img/"IMAGE_NAME"_pressed_SH.png";		\
			}															\
		}    															\

//All the Event.resizes part
#define EVENT_RESIZE_ALL							\
	EVENT_RESIZE(t, 0 0, 0.0 0.0, -1 3, 1.0 0.0)	\
	EVENT_RESIZE(b, 0 -3, 0.0 1.0, -1 -1, 1.0 1.0)	\
	EVENT_RESIZE(l, 0 0, 0.0 0.0, 2 -1, 0.0 1.0)	\
	EVENT_RESIZE(r, -3 0, 1.0 0.0, -1 -1, 1.0 1.0)	\
	EVENT_RESIZE(tl, 0 0, 0.0 0.0, 9 9, 0.0 0.0)	\
	EVENT_RESIZE(tr, -9 0, 1.0 0.0, 0 9, 1.0 0.0)	\
	EVENT_RESIZE(bl, 0 -9, 0.0 1.0, 9 -1, 0.0 1.0)	\
	EVENT_RESIZE(br, -9 -9, 1.0 1.0, 0 0, 1.0 1.0)
	
#define BT_CLOSE_PROGRAMS											\
	OVER("button_close_SH","e.event.close","default","prelight")	\
	OVER("button_close_SH2","e.event.close","default","prelight")	\
	program {														\
         signal: "mouse,down,*"; source: "e.event.close";			\
         action: STATE_SET "pressed" 0.0;							\
         target: "button_close_SH";									\
         target: "button_close_SH2";								\
      }																\
      program {														\
         signal: "mouse,up,*"; source: "e.event.close";				\
         action: STATE_SET "default" 0.0;							\
         target: "button_close_SH";									\
         target: "button_close_SH2";								\
      }																\

#define BT_MAX_PROGRAMS														\
	OVER("button_maximized_SH","e.event.maximize","default","prelight")		\
	OVER("button_maximized_SH2","e.event.maximize","default","prelight")	\
	OVER("button_unmaximized_SH","e.event.maximize","default","prelight")	\
	OVER("button_unmaximized_SH2","e.event.maximize","default","prelight")	\
	program {																\
         signal: "mouse,down,*"; source: "e.event.maximize";				\
         action: STATE_SET "pressed" 0.0;									\
         target: "button_maximized_SH";										\
         target: "button_maximized_SH2";									\
         target: "button_unmaximized_SH";									\
         target: "button_unmaximized_SH2";									\
      }																		\
	program {																\
         signal: "mouse,up,*"; source: "e.event.maximize";					\
         action: STATE_SET "default" 0.0;									\
         target: "button_maximized_SH";										\
         target: "button_maximized_SH2";									\
         target: "button_unmaximized_SH";									\
         target: "button_unmaximized_SH2";									\
      }																		\

#define BT_MIN_PROGRAMS													\
	OVER("button_minimize_SH","e.event.minimize","default","prelight")	\
	OVER("button_minimize_SH2","e.event.minimize","default","prelight")	\
	program {															\
         signal: "mouse,down,*"; source: "e.event.minimize";			\
         action: STATE_SET "pressed" 0.0;								\
         target: "button_minimize_SH";									\
         target: "button_minimize_SH2";									\
      }																	\
	program {															\
         signal: "mouse,up,*"; source: "e.event.minimize";				\
         action: STATE_SET "default" 0.0;								\
         target: "button_minimize_SH";									\
         target: "button_minimize_SH2";									\
      }																	\

#define PROGRAMS									\
      /*Urgent Programs*/							\
      program {										\
         signal: "e,state,urgent"; source: "e";		\
         action: STATE_SET "bounce1" 0.0;			\
         target: "icon";							\
         after: "urg1";								\
      }												\
      program { name: "urg1";						\
         action: STATE_SET "bounce2" 0.0;			\
         transition: DECELERATE 0.2;				\
         target: "icon";							\
         after: "urg2";								\
      }												\
      program { name: "urg2";						\
         action: STATE_SET "bounce1" 0.0;			\
         transition: ACCELERATE 0.2;				\
         target: "icon";							\
         after: "urg1";								\
      }												\
      program {										\
         signal: "e,state,not_urgent"; source: "e";	\
         action: STATE_SET "default" 0.0;			\
         target: "icon";							\
      }												\
													\
      /*Shading Programs*/							\
      program { name: "shade_hide";					\
         action: STATE_SET "hidden" 0.0;			\
         target: "client_clip";						\
      }												\
      program {										\
			signal: "e,state,shading"; source: "e";	\
			action: STATE_SET "shaded" 0.0;			\
			target: "e.swallow.client";				\
	  }												\
	  program {										\
			signal: "e,state,unshaded"; source: "e";\
			action: STATE_SET "default" 0.0;		\
			target: "e.swallow.client";				\
	  }												\
	  program { name: "unshading";					\
         signal: "e,state,unshading"; source: "e";	\
         action: STATE_SET "default" 0.0;			\
         target: "e.swallow.client";				\
         target: "shadow";							\
         target: "client_clip";						\
      }												\
													\
	  /*Shadow Programs*/							\
	  program {										\
         signal: "e,state,shadow,on"; source: "e";	\
         action: STATE_SET "default" 0.0;			\
         target: "shadow_clip";						\
      }												\
      program {										\
         signal: "e,state,shadow,off"; source: "e";	\
         action: STATE_SET "hidden" 0.0;			\
         target: "shadow_clip";						\
      }												\


	 
fonts{
	font: "Ubuntu-R.ttf"   "Ubuntu";
}

styles {
		style {
			name: "title_bar";
			base: "font=Ubuntu font_size=14 align=center color=#000 wrap=mixed ellipsis=1.0";
		}
}
	

group { name: "e/widgets/border/default/border";
   alias: "e/widgets/border/shaped/border";
	data.item: "shadow" "1";
   
   images {
		BORDER_IMAGES 
		BT_CLOSE_IMAGES
		BT_MIN_MAX_IMAGES
	}

   parts {
	
	//Window Border Parts
	BORDER_PARTS
	ICON_PARTS
	TITLE_PARTS("through_left")
	
    //WINDOW BUTTON: A single window buttons have 3 different states (description): default, prelight and pressed
    //for both focused and unfocused window, so I use the clip_to function to make a visible the part with the different 3 different
    //state. Things get a little more complicated for Maximized button, because I have to switch to the Maximized and unmaximized state
    
		THROUGH_BUTTON("right", "e.event.titlebar", -28, -9)
  		THROUGH_BUTTON("middle", "through_right", -38, -19)
		THROUGH_BUTTON("left", "through_middle", -38, -19)
		
		//clip rectangle to switch from unfocused to focused pixmaps
		CLIP_SWITCH("bt", "through_left", "through_right", "default", "focused")
		
		//CLOSE BUTTON
		WIN_BT_BASE("close", "through_right", "focus", "border_frame")		
		//Shine for Close Button
		BT_SHINE("button_close_SH", "close_unfocused", "bt_clip_default", "right", "border_frame_active")
		BT_SHINE("button_close_SH2", "close_focused", "bt_clip_focused", "right", "none")
		
		//MAXIMIZED BUTTON: Be careful! pixmaps named "maximize" are for UNmaximizeD windows and vice versa.
		WIN_BT_BASE("maximize", "through_middle", "border_frame", "border_frame")
		//clip rectangle to switch from maximized to unmaximized pixmaps
		CLIP_SWITCH_CLIPTO("max_foc", "through_middle", "through_middle", "default", "maximized", "bt_clip_focused")
		CLIP_SWITCH_CLIPTO("max_unfoc", "through_middle", "through_middle", "default", "maximized", "bt_clip_default")
		
		//Shine for Unfocused Maximize Button for UNMAXIMIZED window
		BT_SHINE("button_unmaximized_SH", "maximize_unfocused", "max_unfoc_clip_default", "middle", "border_frame_active")
		//Shine for Unfocused Maximize Button for MAXIMIZED window
		BT_SHINE("button_maximized_SH", "unmaximize_unfocused", "max_unfoc_clip_maximized", "middle", "border_frame_active")
		//Shine for Focused Maximize Button for UNMAXIMIZED window		
		BT_SHINE("button_unmaximized_SH2", "maximize_focused", "max_foc_clip_default", "middle", "border_frame_active")
		//Shine for Focused Maximize Button for MAXIMIZED window
		BT_SHINE("button_maximized_SH2", "unmaximize_focused", "max_foc_clip_maximized", "middle", "border_frame_active")

		//Minimize BUTTON
		WIN_BT_BASE("minimize", "through_left", "border_frame", "border_frame")
		//Shine for minimize Button
		BT_SHINE("button_minimize_SH", "minimize_unfocused", "bt_clip_default", "left", "border_frame_active")
		BT_SHINE("button_minimize_SH2", "minimize_focused", "bt_clip_focused", "left", "border_frame_active")


           
	//EVENTS  
		part { name: "e.event.titlebar"; type: RECT;
			 description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel1.to: "border";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "border";
				rel2.offset: -1 27;
				color: TRANSPARENT;
			 }
		  }
		  
		part { name: "e.event.icon"; type: RECT;
			description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				rel2.offset: 0 28;
				rel2.to_y: "border";
				align: 0.0 0.5;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				color: TRANSPARENT;
			}
		}
		WIN_BT_EVENTS("close")
		WIN_BT_EVENTS("maximize")
		WIN_BT_EVENTS("minimize")
	//EVENT_RESIZE
		EVENT_RESIZE_ALL
   }
   programs {
	   
	   BT_CLOSE_PROGRAMS
	   BT_MAX_PROGRAMS
	   BT_MIN_PROGRAMS
	       
      //Maximize / Unmaximize Switch Programs
      program {
         signal: "e,action,maximize*"; source: "e";
         action: STATE_SET "maximized" 0.0;
         target: "max_foc_clip_default";
         target: "max_foc_clip_maximized";
         target: "max_unfoc_clip_default";
         target: "max_unfoc_clip_maximized";
         target: "border";
         target: "border_clip_default";
         target: "border_clip_maximized";
         target: "shadow";
      }
      program {
         signal: "e,action,unmaximize*"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "max_foc_clip_default";
         target: "max_foc_clip_maximized";
         target: "max_unfoc_clip_default";
         target: "max_unfoc_clip_maximized";
         target: "border";
         target: "border_clip_default";
         target: "border_clip_maximized";
         target: "shadow";
      }
      
      //Focus / Unfocus Windows Programs
      program {
        signal: "e,state,focused"; source: "e";
        action: STATE_SET "focused" 0.0;
        target: "borderShine";
        target: "border_maxShine";
        target: "e.text.title";
        target: "through_right";
		target: "through_middle";
		target: "through_left";
        target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
		target: "button_maximize_base";
		target: "button_minimize_base";
      }
      program {
        signal: "e,state,unfocused"; source: "e";
        action: STATE_SET "default" 0.0;
        target: "borderShine";
        target: "border_maxShine";
        target: "e.text.title";
        target: "through_right";
		target: "through_middle";
		target: "through_left";
		target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
		target: "button_maximize_base";
		target: "button_minimize_base";
      }
      
	PROGRAMS

   }
}

group { name: "e/widgets/border/dialog/border";
	alias: "e/widgets/border/modal/border";
	data.item: "shadow" "1";
	images {
		BORDER_IMAGES 
		BT_CLOSE_IMAGES
	}

   parts {
		//Window Border Parts
		BORDER_PARTS
		ICON_PARTS
		TITLE_PARTS("through_right")

		//Window Button
		THROUGH_BUTTON("right", "e.event.titlebar", -28, -9)
		//clip rectangle to switch from unfocused to focused pixmaps
		CLIP_SWITCH("bt", "through_right", "through_right", "default", "focused")
		
		//CLOSE BUTTON
		WIN_BT_BASE("close", "through_right", "focus", "border_frame")		
		//Shine for Close Button
		BT_SHINE("button_close_SH", "close_unfocused", "bt_clip_default", "right", "border_frame_active")
		BT_SHINE("button_close_SH2", "close_focused", "bt_clip_focused", "right", "none")

		//EVENTS  
		part { name: "e.event.titlebar"; type: RECT;
			 description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel1.to: "border";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "border";
				rel2.offset: -1 27;
				color: TRANSPARENT;
			 }
		  }
		  
		part { name: "e.event.icon"; type: RECT;
			description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				rel2.offset: 0 28;
				rel2.to_y: "border";
				align: 0.0 0.5;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				color: TRANSPARENT;
			}
		}
		WIN_BT_EVENTS("close")
		EVENT_RESIZE_ALL
		
   }
	programs {
		
		BT_CLOSE_PROGRAMS
		
      //Focus / Unfocus Windows Programs
      program {
        signal: "e,state,focused"; source: "e";
        action: STATE_SET "focused" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
        target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";

      }
      program {
        signal: "e,state,unfocused"; source: "e";
        action: STATE_SET "default" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
		target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
      }
      
		PROGRAMS
   }
}

group { name: "e/widgets/border/noresize/border";
	data.item: "shadow" "1";
   
   images {
		BORDER_IMAGES 
		BT_CLOSE_IMAGES
		BT_MIN_MAX_IMAGES
	}

   parts {
	
	//Window Border Parts
	BORDER_PARTS
	ICON_PARTS
	TITLE_PARTS("through_left")
	
    //WINDOW BUTTON: A single window buttons have 3 different states (description): default, prelight and pressed
    //for both focused and unfocused window, so I use the clip_to function to make a visible the part with the different 3 different
    //state. Things get a little more complicated for Maximized button, because I have to switch to the Maximized and unmaximized state
    
		THROUGH_BUTTON("right", "e.event.titlebar", -28, -9)
  		THROUGH_BUTTON("middle", "through_right", -38, -19)
		THROUGH_BUTTON("left", "through_middle", -38, -19)
		
		//clip rectangle to switch from unfocused to focused pixmaps
		CLIP_SWITCH("bt", "through_left", "through_right", "default", "focused")
		
		//CLOSE BUTTON
		WIN_BT_BASE("close", "through_right", "focus", "border_frame")		
		//Shine for Close Button
		BT_SHINE("button_close_SH", "close_unfocused", "bt_clip_default", "right", "border_frame_active")
		BT_SHINE("button_close_SH2", "close_focused", "bt_clip_focused", "right", "none")
		
		//MAXIMIZED BUTTON: Be careful! pixmaps named "maximize" are for UNmaximizeD windows and vice versa.
		WIN_BT_BASE("maximize", "through_middle", "border_frame", "border_frame")
		//clip rectangle to switch from maximized to unmaximized pixmaps
		CLIP_SWITCH_CLIPTO("max_foc", "through_middle", "through_middle", "default", "maximized", "bt_clip_focused")
		CLIP_SWITCH_CLIPTO("max_unfoc", "through_middle", "through_middle", "default", "maximized", "bt_clip_default")
		
		//Shine for Unfocused Maximize Button for UNMAXIMIZED window
		BT_SHINE("button_unmaximized_SH", "maximize_unfocused", "max_unfoc_clip_default", "middle", "border_frame_active")
		//Shine for Unfocused Maximize Button for MAXIMIZED window
		BT_SHINE("button_maximized_SH", "unmaximize_unfocused", "max_unfoc_clip_maximized", "middle", "border_frame_active")
		//Shine for Focused Maximize Button for UNMAXIMIZED window		
		BT_SHINE("button_unmaximized_SH2", "maximize_focused", "max_foc_clip_default", "middle", "border_frame_active")
		//Shine for Focused Maximize Button for MAXIMIZED window
		BT_SHINE("button_maximized_SH2", "unmaximize_focused", "max_foc_clip_maximized", "middle", "border_frame_active")

		//Minimize BUTTON
		WIN_BT_BASE("minimize", "through_left", "border_frame", "border_frame")
		//Shine for minimize Button
		BT_SHINE("button_minimize_SH", "minimize_unfocused", "bt_clip_default", "left", "border_frame_active")
		BT_SHINE("button_minimize_SH2", "minimize_focused", "bt_clip_focused", "left", "border_frame_active")


           
	//EVENTS  
		part { name: "e.event.titlebar"; type: RECT;
			 description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel1.to: "border";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "border";
				rel2.offset: -1 27;
				color: TRANSPARENT;
			 }
		  }
		  
		part { name: "e.event.icon"; type: RECT;
			description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				rel2.offset: 0 28;
				rel2.to_y: "border";
				align: 0.0 0.5;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				color: TRANSPARENT;
			}
		}
		WIN_BT_EVENTS("close")
		WIN_BT_EVENTS("maximize")
		WIN_BT_EVENTS("minimize")

   }
   programs {
	   BT_CLOSE_PROGRAMS
	   BT_MAX_PROGRAMS
	   BT_MIN_PROGRAMS

      //Maximize / Unmaximize Switch Programs
      program {
         signal: "e,action,maximize*"; source: "e";
         action: STATE_SET "maximized" 0.0;
         target: "max_foc_clip_default";
         target: "max_foc_clip_maximized";
         target: "max_unfoc_clip_default";
         target: "max_unfoc_clip_maximized";
      }
      program {
         signal: "e,action,unmaximize*"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "max_foc_clip_default";
         target: "max_foc_clip_maximized";
         target: "max_unfoc_clip_default";
         target: "max_unfoc_clip_maximized";
      }
      
      //Focus / Unfocus Windows Programs
      program {
        signal: "e,state,focused"; source: "e";
        action: STATE_SET "focused" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
		target: "through_middle";
		target: "through_left";
        target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
		target: "button_maximize_base";
		target: "button_minimize_base";
      }
      program {
        signal: "e,state,unfocused"; source: "e";
        action: STATE_SET "default" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
		target: "through_middle";
		target: "through_left";
		target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
		target: "button_maximize_base";
		target: "button_minimize_base";
      }
      
		PROGRAMS
   }
}

group { name: "e/widgets/border/noresize_dialog/border";
	data.item: "shadow" "1";
	images {
		BORDER_IMAGES 
		BT_CLOSE_IMAGES
	}

   parts {
		//Window Border Parts
		BORDER_PARTS
		ICON_PARTS
		TITLE_PARTS("through_right")

		//Window Button
		THROUGH_BUTTON("right", "e.event.titlebar", -28, -9)
		//clip rectangle to switch from unfocused to focused pixmaps
		CLIP_SWITCH("bt", "through_right", "through_right", "default", "focused")
		
		//CLOSE BUTTON
		WIN_BT_BASE("close", "through_right", "focus", "border_frame")		
		//Shine for Close Button
		BT_SHINE("button_close_SH", "close_unfocused", "bt_clip_default", "right", "border_frame_active")
		BT_SHINE("button_close_SH2", "close_focused", "bt_clip_focused", "right", "none")

		//EVENTS  
		part { name: "e.event.titlebar"; type: RECT;
			 description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel1.to: "border";
				rel2.relative: 1.0 0.0;
				rel2.to_y: "border";
				rel2.offset: -1 27;
				color: TRANSPARENT;
			 }
		  }
		  
		part { name: "e.event.icon"; type: RECT;
			description { state: "default" 0.0;
				rel1.relative: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				rel2.offset: 0 28;
				rel2.to_y: "border";
				align: 0.0 0.5;
				aspect: 1.0 1.0; aspect_preference: VERTICAL;
				color: TRANSPARENT;
			}
		}
		WIN_BT_EVENTS("close")
		
   }
	programs {
	
	BT_CLOSE_PROGRAMS
	
      //Focus / Unfocus Windows Programs
      program {
        signal: "e,state,focused"; source: "e";
        action: STATE_SET "focused" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
        target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";

      }
      program {
        signal: "e,state,unfocused"; source: "e";
        action: STATE_SET "default" 0.0;
        target: "borderShine";
        target: "e.text.title";
        target: "through_right";
		target: "bt_clip_default";
		target: "bt_clip_focused";
		target: "button_close_base";
      }
	PROGRAMS
	}
}

group { name: "e/widgets/border/pixel/border";
   parts {
      part { name: "client_clip"; type: RECT;
         description { state: "default" 0.0;
            rel1.to_y: "e.swallow.client";
            rel2.to_y: "e.swallow.client";
         }
      }
      part { name: "e.swallow.client"; type: SWALLOW;
         description { state: "default" 0.0;
            rel1.offset: 1 1;
            rel2.offset: -2 -2;
         }
      }
      part { name: "top"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 255;
            align: 0.0 0.0;
            max: 99999 1;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
			color_class: "focus";
         }
      }
      part { name: "bottom"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 255;
            align: 0.0 1.0;
            max: 99999 1;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
			color_class: "focus";
         }
      }
      part { name: "left"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 255;
            align: 0.0 0.0;
            max: 1 99999;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
			color_class: "focus";
         }
      }
      part { name: "right"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 255;
            align: 1.0 0.0;
            max: 1 99999;
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
			color_class: "focus";
         }
      }
      part { name: "e.event.resize.tl"; type: RECT;
         description { state: "default" 0.0;
            rel2.relative: 0.0 0.0;
            min: 32 4;
            align: 0.0 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "e.event.resize.t"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "e.event.resize.tl";
            rel2.relative: 0.0 0.0;
            rel2.to_x: "e.event.resize.tr";
            min: 0 4;
            align: 0.5 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "e.event.resize.tr"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 0.0;
            min: 32 4;
            align: 1.0 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "e.event.resize.bl"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 0.0 1.0;
            min: 32 5;
            align: 0.0 1.0;
            color: 0 0 0 0;
            fixed: 1 1;
         }
      }
      part { name: "e.event.resize.b"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 1.0;
            rel1.to_x: "e.event.resize.tl";
            rel2.relative: 0.0 1.0;
            rel2.to_x: "e.event.resize.tr";
            min: 0 5;
            align: 0.5 1.0;
            color: 0 0 0 0;
            fixed: 0 1;
         }
      }
      part { name: "e.event.resize.br"; type: RECT;
         description { state: "default" 0.0;
            rel1.relative: 1.0 1.0;
            rel2.relative: 1.0 1.0;
            min: 32 5;
            align: 1.0 1.0;
            color: 0 0 0 0;
            fixed: 1 1;
         }
      }
   }
   programs {
      program {
         signal: "e,state,focused"; source: "e";
         action: STATE_SET "focused" 0.0;
         target: "top";
         target: "bottom";
         target: "left";
         target: "right";
      }
      program {
         signal: "e,state,unfocused"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "top";
         target: "bottom";
         target: "left";
         target: "right";
      }
   }
}

group { name: "e/widgets/border/default/move";
   images.image: "img/popup.png" COMP;
   images.image: "img/ic_win_move.png" COMP;
   //data.item: "shaped" "1";
   parts {
      part { name: "bg"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "img/popup.png";
            image.border: 5 5 5 5;
            fill.smooth: 0;
            color: TOOLTIP_COLOR;
         }
      }
      part { name: "icon";
         description { state: "default" 0.0;
            align: 0.0 0.5;
            FIXED_SIZE(21, 21)
            rel1.offset: 4 2;
            rel2.relative: 0.0 1.0;
            rel2.offset: 4 -3;
            image.normal: "img/ic_win_move.png";
         }
      }
      part { name: "e.text.label"; type: TEXT;
         effect: SHADOW BOTTOM;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to_x: "icon";
            rel1.offset: 1 4;
            rel1.relative: 1.0 0.0;
            rel2.offset: -5 -5;
            color: 255 255 255 255;
            color3: 255 255 255 255;
            color_class: "move_text";
            text { font: "Sans"; size: 12;
               min: 1 1;
               ellipsis: -1;
               text_class: "move_text";
            }
         }
      }
   }
}

group { name: "e/widgets/border/default/resize";
   inherit: "e/widgets/border/default/move";
   images.image: "img/ic_win_resize.png" COMP;
   parts {
      part { name: "icon";
         description { state: "default" 0.0;
            image.normal: "img/ic_win_resize.png";
         }
      }
		part { name: "e.text.label"; 
			description { state: "default" 0.0;
			     color_class: "resize_text";
			     text {
					 text_class: "resize_text";
				 }
			}
		}
   }
}

